# -*- coding: utf-8 -*-
"""greek_gods_exam

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1y-T3shlQYhOaOBTcVKz3wpPASaAcI2zz
"""

import pandas as pd

greek_gods= [
    {"God": "Zeus", "Domain": "King of the Gods", "Symbol": "Thunderbolt", "Age": 10000},
    {"God": "Poseidon", "Domain": "God of the Sea", "Symbol": "Trident", "Age": 9000},
    {"God": "Hera", "Domain": "Queen of the Gods", "Symbol": "Peacock", "Age": 8500},
    {"God": "Athena", "Domain": "Goddess of Wisdom", "Symbol": "Owl", "Age": 8000},
    {"God": "Hades", "Domain": "God of the Underworld", "Symbol": "Helmet", "Age": 9500}
]

greek_goddesses= [
    {"Goddess": "Aphrodite", "Domain": "Goddess of Love", "Symbol": "Dove", "Age": 7000},
    {"Goddess": "Artemis", "Domain": "Goddess of the Hunt", "Symbol": "Bow and Arrow", "Age": 7500},
    {"Goddess": "Demeter", "Domain": "Goddess of Agriculture", "Symbol": "Wheat", "Age": 8000},
    {"Goddess": "Hestia", "Domain": "Goddess of the Hearth", "Symbol": "Fire", "Age": 8200},
    {"Goddess": "Persephone", "Domain": "Queen of the Underworld", "Symbol": "Pomegranate", "Age": 7800}
]

gods_df = pd.DataFrame(greek_gods)
goddesses_df = pd.DataFrame(greek_goddesses)

#Question 1

merged_df = pd.merge(gods_df, goddesses_df, how='outer')
print(merged_df)

#Question 2

merged_df2 = merged_df
filtered_df = merged_df2[merged_df1['Age'] > 8000]
sorted_df = filtered_df.sort_values(by='Age', ascending=False)
print(sorted_df.to_string(index=False))

#Question 3

merged_df3 = pd.merge(gods_df, goddesses_df, on="Domain", how="outer", suffixes=("_god", "_goddess"))
average_age_df = merged_df3.groupby(["Domain"]).agg({
    "Age_god": "mean",
    "Age_goddess": "mean"
})
print(average_age_df)

#Question 4

max_age_god = merged_df3["Age_god"].max()
max_age_goddess = merged_df3["Age_goddess"].max()

max_age = max(max_age_god, max_age_goddess)

if max_age == max_age_god:
    print(f"The individual with the highest age ({max_age}) is a god.")
elif max_age == max_age_goddess:
    print(f"The individual with the highest age ({max_age}) is a goddess.")
else:
    print("No individual found with the highest age.")

#Question 5

age_bins = [0, 5000, 8001, float('inf')]
age_labels = ['Young', 'Middle-aged', 'Old']

gods_df['Age_Group'] = pd.cut(gods_df['Age'], bins=age_bins, labels=age_labels, right=False)
goddesses_df['Age_Group'] = pd.cut(goddesses_df['Age'], bins=age_bins, labels=age_labels, right=False)

#Question 5

print(gods_df)

#Question 5

print(goddesses_df)

#Question 6

avg_age_gods = gods_df['Age'].mean()
avg_age_goddesses = goddesses_df['Age'].mean()

if avg_age_gods > avg_age_goddesses:
    print("Gods tend to be older than goddesses.")
elif avg_age_goddesses > avg_age_gods:
    print("Goddesses tend to be older than gods.")
else:
    print("The average ages of gods and goddesses are the same.")

#Question 7

for index, row in merged_df.iterrows():
    if row['Age'] > 8000:
        if pd.notnull(row['God']):
            print(row['God'])
        if pd.notnull(row['Goddess']):
            print(row['Goddess'])

#Question 8

oldest_age = 0
oldest_name = None

num_rows = len(merged_df)
index = 0

while index < num_rows:
    age = merged_df.iloc[index]['Age']
    if age > oldest_age:
        oldest_age = age
        if pd.notnull(merged_df.iloc[index]['God']):
            oldest_name = merged_df.iloc[index]['God']
        elif pd.notnull(merged_df.iloc[index]['Goddess']):
            oldest_name = merged_df.iloc[index]['Goddess']
    index += 1

print(f"The oldest god/goddess is {oldest_name} with an age of {oldest_age} years.")